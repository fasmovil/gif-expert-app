{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","app","document","getElementById","ReactDOM","render"],"mappings":"uLAGaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAC7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKhB,SAEE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAlBmB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,QAkBnBG,YAAY,yB,+BCzBPC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfC,EADe,gDACgCC,UAAUH,GAD1C,+DAEEI,MAAMF,GAFR,cAEfG,EAFe,gBAGAA,EAASC,OAHT,uBAGdC,EAHc,EAGdA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARhB,kBAYdM,GAZc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OACE,sBAAKc,UAAU,uDAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAExB,ECJ0B,SAAEA,GAC5B,MAA0Bf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAACC,GACLH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGd,CAACpB,IAEGqB,EDZmBK,CAAc1B,GAAhCO,EAAR,EAAQA,KAAMa,EAAd,EAAcA,QAEd,OACE,qCACE,6BAAMpB,IACJoB,GAAW,2CACb,qBAAKJ,UAAU,YAAf,SAEET,EAAKE,KAAK,SAAAC,GAER,OAAO,cAAC,EAAD,eAEDA,GADCA,EAAIC,aEaNgB,EAzBM,SAAAC,GAEnB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAEA,OACE,eAAC,WAAD,WACE,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI6C,EAAWpB,KAAI,SAAAT,GACb,OAAO,cAAC,EAAD,CAELA,SAAWA,GADLA,YCbd8B,G,YAAMC,SAASC,eAAe,QAEpCC,IAASC,OAAO,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.2745f589.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputValue = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trim().length > 2) {\r\n      setCategories(cats => [inputValue, ...cats ]);\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      \r\n      <input\r\n        type=\"text\"\r\n        value={ inputValue}\r\n        onChange={ handleInputValue }\r\n        placeholder=\"Ingrese categoria\"\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async ( category ) => {\r\n  const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=rVS2uRE3cOqXBzs4oTT4029ULqRwQE8K&limit=10`;\r\n  const response = await fetch(url);\r\n  const {data} = await response.json();\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url\r\n    }\r\n  });\r\n  \r\n  return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n  \r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn animate__slow\">\r\n      <img src={url} alt={title}></img>\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { data, loading } = useFetchGifs( category );\r\n  \r\n  return (\r\n    <>\r\n      <h3>{ category }</h3>\r\n      { loading && <p>Loading...</p> }\r\n      <div className=\"card-grid\">\r\n      {\r\n        data.map( img => {\r\n          \r\n          return <GifGridItem\r\n            key={img.id}\r\n            {...img}>\r\n            </GifGridItem>\r\n        })\r\n\r\n      }\r\n      </div>\r\n    \r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(()=>{\r\n    getGifs(category)\r\n      .then((imgs)=>{\r\n        setstate({\r\n          data: imgs,\r\n          loading: false\r\n        })\r\n      });\r\n  }, [category]);\r\n\r\n  return state;\r\n}\r\n","import React, { Fragment, useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nconst GifExpertApp = props => {\r\n  \r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Gif Expert App</h2>\r\n      <AddCategory setCategories={ setCategories }></AddCategory>\r\n      <hr />\r\n      \r\n      <ol>\r\n        {\r\n          categories.map(category => {\r\n            return <GifGrid\r\n              key={ category } \r\n              category={ category }></GifGrid>\r\n          })\r\n        }\r\n      </ol>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\nimport 'animate.css';\n\nconst app = document.getElementById('app');\n\nReactDOM.render(<GifExpertApp />, app); \n"],"sourceRoot":""}